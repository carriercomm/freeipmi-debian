.TH IPMI-PEF-CONFIG 8 "2011-10-26" "ipmi-pef-config 1.0.8" "System Commands"
.SH "NAME"
ipmi-pef-config \- configure PEF values
.SH "SYNOPSIS"
.B ipmi-pef-config
[\fIOPTION\fR...]
.SH "DESCRIPTION"
.B Ipmi-pef-config
is a Platform Event Filtering (PEF) configuration utility.
This configuration tool is for advanced IPMI users and
generally not-required for IPMI to function. Most IPMI users
will not need to use this tool.

For configuration of general BMC parameters, sensors, or chassis,
please see the
.B bmc-config(8),
.B ipmi-sensors-config(8),
and
.B ipmi-chassis-config(8)
tools respectively. For some OEM specific configurations, please see
.B ipmi-oem(8).
.LP
Listed below are general IPMI options, tool specific options, trouble
shooting information, workaround information, examples, and known
issues. For a general introduction to FreeIPMI please see
.B freeipmi(7).
See GENERAL USE below for a description on how most will want to use
.B Ipmi-pef-config.
.SH "GENERAL OPTIONS"
The following options are general options for configuring IPMI
communication and executing general tool commands.
.TP
\fB\-D\fR \fIIPMIDRIVER\fR, \fB\-\-driver\-type\fR=\fIIPMIDRIVER\fR
Specify the driver type to use instead of doing an auto selection.
The currently available outofband drivers are LAN and LAN_2_0, which
perform IPMI 1.5 and IPMI 2.0 respectively. The currently available
inband drivers are KCS, SSIF, OPENIPMI, and SUNBMC.
.TP
\fB\-\-disable\-auto\-probe\fR
Do not probe in-band IPMI devices for default settings.
.TP
\fB\-\-driver\-address\fR=\fIDRIVER-ADDRESS\fR
Specify the in-band driver address to be used instead of the probed
value. \fIDRIVER-ADDRESS\fR should be prefixed with "0x" for a hex
value and '0' for an octal value.
.TP
\fB\-\-driver\-device\fR=\fIDEVICE\fR
Specify the in-band driver device path to be used instead of the
probed path.
.TP
\fB\-\-register\-spacing\fR=\fIREGISTER-SPACING\fR
Specify the in-band driver register spacing instead of the
probed value.
.TP
\fB\-h\fR \fIIPMIHOST1,IPMIHOST2,...\fR, \fB\-\-hostname\fR=\fIIPMIHOST1,IPMIHOST2,...\fR
Specify the remote host(s) to communicate with. Multiple hostnames
may be separated by comma or may be specified in a range format; see
HOSTRANGED SUPPORT below.
.TP
\fB\-u\fR \fIUSERNAME\fR, \fB\-\-username\fR=\fIUSERNAME\fR
Specify the username to use when authenticating with the remote host.
If not specified, a null (i.e. anonymous) username is assumed. The
user must have atleast ADMIN privileges in order for this tool to
operate fully.
.TP
\fB\-p\fR \fIPASSWORD\fR, \fB\-\-password\fR=\fIPASSWORD\fR
Specify the password to use when authenticationg with the remote host.
If not specified, a null password is assumed. Maximum password length
is 16 for IPMI 1.5 and 20 for IPMI 2.0.
.TP
\fB\-P\fR, \fB\-\-password-prompt\fR
Prompt for password to avoid possibility of listing
it in process lists.
.TP
\fB\-k\fR \fIK_G\fR, \fB\-\-k-g\fR=\fIK_G\fR
Specify the K_g BMC key to use when authenticating with the remote
host for IPMI 2.0. If not specified, a null key is assumed. To input
the key in hexadecimal form, prefix the string with '0x'. E.g., the
key 'abc' can be entered with the either the string 'abc' or the
string '0x616263'
.TP
\fB\-K\fR, \fB\-\-k-g-prompt\fR
Prompt for k-g to avoid possibility of listing it in process lists.
.TP
\fB\-\-session-timeout\fR=\fIMILLISECONDS\fR
Specify the session timeout in milliseconds. Defaults to 20000
milliseconds (20 seconds) if not specified.
.TP
\fB\-\-retransmission-timeout\fR=\fIMILLISECONDS\fR
Specify the packet retransmission timeout in milliseconds. Defaults
to 1000 milliseconds (1 second) if not specified. The retransmission
timeout cannot be larger than the session timeout.
.TP
\fB\-a\fR \fIAUTHENTICATION\-TYPE\fR, \fB\-\-authentication\-type\fR=\fIAUTHENTICATION\-TYPE\fR
Specify the IPMI 1.5 authentication type to use. The currently
available authentication types are NONE, STRAIGHT_PASSWORD_KEY, MD2,
and MD5. Defaults to MD5 if not specified.
.TP
\fB\-I\fR \fICIPHER-SUITE-ID\fR, \fB\-\-cipher\-suite-id\fR=\fICIPHER-SUITE-ID\fR
Specify the IPMI 2.0 cipher suite ID to use. The Cipher Suite ID
identifies a set of authentication, integrity, and confidentiality
algorithms to use for IPMI 2.0 communication. The authentication
algorithm identifies the algorithm to use for session setup, the
integrity algorithm identifies the algorithm to use for session packet
signatures, and the confidentiality algorithm identifies the algorithm
to use for payload encryption. Defaults to cipher suite ID 3 if not
specified. The following cipher suite ids are currently supported:
.sp
0 - Authentication Algorithm = None; Integrity Algorithm = None; Confidentiality Algorithm = None
.sp
1 - Authentication Algorithm = HMAC-SHA1; Integrity Algorithm = None; Confidentiality Algorithm = None
.sp
2 - Authentication Algorithm = HMAC-SHA1; Integrity Algorithm = HMAC-SHA1-96; Confidentiality Algorithm = None
.sp
3 - Authentication Algorithm = HMAC-SHA1; Integrity Algorithm = HMAC-SHA1-96; Confidentiality Algorithm = AES-CBC-128
.\" .sp
.\" 4 - Authentication Algorithm = HMAC-SHA1; Integrity Algorithm = HMAC-SHA1-96; Confidentiality Algorithm = xRC4-128
.\" .sp
.\" 5 - Authentication Algorithm = HMAC-SHA1; Integrity Algorithm = HMAC-SHA1-96; Confidentiality Algorithm = xRC4-40
.sp
6 - Authentication Algorithm = HMAC-MD5; Integrity Algorithm = None; Confidentiality Algorithm = None
.sp
7 - Authentication Algorithm = HMAC-MD5; Integrity Algorithm = HMAC-MD5-128; Confidentiality Algorithm = None
.sp
8 - Authentication Algorithm = HMAC-MD5; Integrity Algorithm = HMAC-MD5-128; Confidentiality Algorithm = AES-CBC-128
.\" .sp
.\" 9 - Authentication Algorithm = HMAC-MD5; Integrity Algorithm = HMAC-MD5-128; Confidentiality Algorithm = xRC4-128
.\" .sp
.\" 10 - Authentication Algorithm = HMAC-MD5; Integrity Algorithm = HMAC-MD5-128; Confidentiality Algorithm = xRC4-40
.sp
11 - Authentication Algorithm = HMAC-MD5; Integrity Algorithm = MD5-128; Confidentiality Algorithm = None
.sp
12 - Authentication Algorithm = HMAC-MD5; Integrity Algorithm = MD5-128; Confidentiality Algorithm = AES-CBC-128
.\" .sp
.\" 13 - Authentication Algorithm = HMAC-MD5; Integrity Algorithm = MD5-128; Confidentiality Algorithm = xRC4-128
.\" .sp
.\" 14 - Authentication Algorithm = HMAC-MD5; Integrity Algorithm = MD5-128; Confidentiality Algorithm = xRC4-40
.\" XXX GUESS
.\" .sp
.\" 15 - Authentication Algorithm = HMAC-SHA256; Integrity Algorithm = None; Confidentiality Algorithm = None
.\" XXX GUESS
.\" .sp
.\" 16 - Authentication Algorithm = HMAC-SHA256; Integrity Algorithm = HMAC_SHA256_128; Confidentiality Algorithm = None
.sp
17 - Authentication Algorithm = HMAC-SHA256; Integrity Algorithm = HMAC_SHA256_128; Confidentiality Algorithm = AES-CBC-128
.\" XXX GUESS
.\" .sp
.\" 18 - Authentication Algorithm = HMAC-SHA256; Integrity Algorithm = HMAC_SHA256_128; Confidentiality Algorithm = xRC4-128
.\" XXX GUESS
.\" .sp
.\" 19 - Authentication Algorithm = HMAC-SHA256; Integrity Algorithm = HMAC_SHA256_128; Confidentiality Algorithm = xRC4-40
.TP
\fB\-l\fR \fIPRIVILEGE\-LEVEL\fR, \fB\-\-privilege-level\fR=\fIPRIVILEGE\-LEVEL\fR
Specify the privilege level to be used. The currently available
privilege levels are USER, OPERATOR, and ADMIN. Defaults to ADMIN if
not specified.
.TP
\fB\-\-config\-file\fR=\fIFILE\fR
Specify an alternate configuration file.
.TP
\fB\-W\fR \fIWORKAROUNDS\fR, \fB\-\-workaround\-flags\fR=\fIWORKAROUNDS\fR
Specify workarounds to vendor compliance issues. Multiple workarounds
can be specified separated by commas. A special command line flag of
"none", will indicate no workarounds (may be useful for overriding
configured defaults). See WORKAROUNDS below for a list of available
workarounds.
.TP
\fB\-\-debug\fR
Turn on debugging.
.TP
\fB\-?\fR, \fB\-\-help\fR
Output a help list and exit.
.TP
\fB\-\-usage\fR
Output a usage message and exit.
.TP
\fB\-V\fR, \fB\-\-version\fR
Output the program version and exit.
.SH "IPMI-PEF-CONFIG OPTIONS"
The following options are specific to
.B Ipmi-pef-config.
.TP
\fB\-i\fR, \fB\-\-info\fR
Show general information about PEF configuration.
.SH "CONFIG OPTIONS"
The following options are used to read, write, and find differences
in configuration values.
.TP
\fB\-o\fR, \fB\-\-checkout\fR
Fetch configuration information.
.TP
\fB\-c\fR, \fB\-\-commit\fR
Update configuration information from a config file or key pairs.
.TP
\fB\-d\fR, \fB\-\-diff\fR
Show differences between stored information and a config file or key pairs.
.TP
\fB\-n\fR \fIFILENAME\fR, \fB\-\-filename\fR=\fIFILENAME\fR
Specify a config file for checkout/commit/diff.
.TP
\fB\-e\fR \fI"KEY=VALUE"\fR, \fB\-\-key\-pair\fR=\fI"KEY=VALUE"\fR
Specify KEY=VALUE pairs for checkout/commit/diff. Specify KEY by
SectionName:FieldName. This option can be used multiple times. On
commit, any KEY=VALUE pairs will overwrite any pairs specified in a
file with \fB\-\-filename\fR.
.TP
\fB\-S\fR \fISECTION\fR, \fB\-\-section\fR=\fISECTION\fR
Specify a SECTION for checkout. This option can be used multiple times.
.TP
\fB\-L\fR, \fB\-\-listsections\fR
List available sections for checkout. Some sections in the list may
not be checked out by default and may require verbosity to be
increased.
.TP
\fB\-v\fR, \fB\-\-verbose\fR
Output verbose information. When used with \-\-checkout, additional
uncommon sections and/or fields will be shown. In
.B ipmi-pef-config,
this includes checking out sections for each channel on a system, if
multiple channels exist.
.TP
\fB\-vv\fR
Output very verbose information. Output additional detailed
information about what fields can and cannot be checked out, and
sometimes the reason why. Sometimes output fields that are identified
as unsupported on the motherboard.
.TP
\fB\-\-lan\-channel\-number\fR=\fINUMBER\fR
Use an specific channel number for LAN configuration. Particularly
useful if motherboard contains multiple LAN channels and a user wishes
to use a specific one.
.SH "HOSTRANGED OPTIONS"
The following options manipulate hostranged output. See HOSTRANGED
SUPPORT below for additional information on hostranges.
.TP
\fB\-B\fR, \fB\-\-buffer-output\fR
Buffer hostranged output. For each node, buffer standard output until
the node has completed its IPMI operation. When specifying this
option, data may appear to output slower to the user since the the
entire IPMI operation must complete before any data can be output.
See HOSTRANGED SUPPORT below for additional information.
.TP
\fB\-C\fR, \fB\-\-consolidate-output\fR
Consolidate hostranged output. The complete standard output from
every node specified will be consolidated so that nodes with identical
output are not output twice. A header will list those nodes with the
consolidated output. When this option is specified, no output can be
seen until the IPMI operations to all nodes has completed. If the
user breaks out of the program early, all currently consolidated
output will be dumped. See HOSTRANGED SUPPORT below for additional
information.
.TP
\fB\-F\fR \fINUM\fR, \fB\-\-fanout\fR=\fINUM\fR
Specify multiple host fanout. A "sliding window" (or fanout)
algorithm is used for parallel IPMI communication so that slower nodes
or timed out nodes will not impede parallel communication. The
maximum number of threads available at the same time is limited by the
fanout. The default is 64.
.TP
\fB\-E\fR, \fB\-\-eliminate\fR
Eliminate hosts determined as undetected by
.B ipmidetect.
This attempts to remove the common issue of hostranged execution
timing out due to several nodes being removed from service in a large
cluster. The
.B ipmidetectd
daemon must be running on the node executing the command.
.TP
\fB\-\-always\-prefix\fR
Always prefix output, even if only one host is specified or
communicating in-band. This option is primarily useful for
scripting purposes. Option will be ignored if specified with
the \fB\-C\fR option.
.SH "GENERAL USE"
Most users of will want to:
.LP
A) Run with --checkout to get a copy of the current configuration and
store it in a file. The standard output can be redirected to a file
or a file can be specified with the --filename option.
.LP
B) Edit the configuration file with an editor.
.LP
C) Commit the configuration back using the --commit option and
specifying the configuration file with the --filename option. The
configuration can be committed to multiple hosts in parallel via the
hostrange support.
.LP
Although not typically necessarily, some motherboards do not store
configuration values in non-volatile memory. Therefore, after system
reboots, some configuration values may have changed. The user may
wish to run configuration tools on each boot to ensure configuration
values remain.
.SH "EDITING THE CHECKOUT FILE"
Options for editing fields in the checkout file are usually listed in
a comment above the field. When there are to many options to make it
practical, they are listed here in the MAN page.
.TP
\fBSensor_Type Options\fR
Reserved, Temperature, Voltage, Current, Fan, Physical_Security,
Platform_Security_Violation_Attempt, Processor, Power_Supply,
Power_Unit, Cooling_Device, Other_Units_Based_Sensor, Memory,
Drive_Slot, Post_Memory_Resize, System_Firmware_Progress,
Event_Logging_Disabled, Watchdog1, System_Event, Critical_Interrupt,
Button_Switch, Module_Board, Microcontroller_Coprocessor, Add_In_Card,
Chassis, Chip_Set, Other_FRU, Cable_Interconnect, Terminator,
System_Boot_Initiated, Boot_Error, OS_Boot, OS_Critical_Stop,
Slot_Connector, System_ACPI_Power_State, Watchdog2, Platform_Alert,
Entity_Presence, Monitor_Asic_IC, Lan, Management_Subsystem_Health,
Battery, Session_Audit, Version_Change, FRU_State, and Any
.SH "IPMI-PEF-CONFIG SPECIAL CASE CONFIGURATION INFORMATION"
On some motherboards, multiple channels may exist for LAN IPMI
communication. If multiple channels exist, configuration of both
channels can be viewed and ultimately configured by running
\fI\-\-checkout\fR under verbose mode. Each section name will be
suffixed appropriately with the word \fIChannel\fR and the channel
number. For example, you might see a \fICommunity_String_Channel_1\fR
and \fICommunity_String_Channel_3\fR, where you can configure the
Community String on Channels 1 and 3 respectively.
.SH "HOSTRANGED SUPPORT"
Multiple hosts can be input either as an explicit comma separated
lists of hosts or a range of hostnames in the general form:
prefix[n-m,l-k,...], where n < m and l < k, etc. The later form
should not be confused with regular expression character classes (also
denoted by []). For example, foo[19] does not represent foo1 or foo9,
but rather represents a degenerate range: foo19.
.LP
This range syntax is meant only as a convenience on clusters with a
prefixNN naming convention and specification of ranges should not be
considered necessary -- the list foo1,foo9 could be specified as such,
or by the range foo[1,9].
.LP
Some examples of range usage follow:
.nf
    foo[01-05] instead of foo01,foo02,foo03,foo04,foo05
    foo[7,9-10] instead of foo7,foo9,foo10
    foo[0-3] instead of foo0,foo1,foo2,foo3
.fi
.LP
As a reminder to the reader, some shells will interpret brackets ([
and ]) for pattern matching. Depending on your shell, it may be
necessary to enclose ranged lists within quotes.
.LP
When multiple hosts are specified by the user, a thread will be
executed for each host in parallel up to the configured fanout (which
can be adjusted via the \fB\-F\fR option). This will allow
communication to large numbers of nodes far more quickly than if done
in serial.
.LP
By default, standard output from each node specified will be output
with the hostname prepended to each line. Although this output is
readable in many situations, it may be difficult to read in other
situations. For example, output from multiple nodes may be mixed
together. The \fB\-B\fR and \fB\-C\fR options can be used to change
this default.
.LP
In-band IPMI Communication will be used when the host "localhost" is
specified. This allows the user to add the localhost into the
hostranged output.
.SH "GENERAL TROUBLESHOOTING"
Most often, IPMI problems are due to configuration problems. Inband
IPMI problems are typically caused by improperly configured drivers or
non-standard BMCs. IPMI over LAN problems involve a misconfiguration
of the remote machine's BMC.  Double check to make sure the following
are configured properly in the remote machine's BMC: IP address, MAC
address, subnet mask, username, user enablement, user privilege,
password, LAN privilege, LAN enablement, and allowed authentication
type(s). For IPMI 2.0 connections, double check to make sure the
cipher suite privilege(s) and K_g key are configured properly. The
.B bmc-config(8)
tool can be used to check and/or change these configuration
settings.
.LP
The following are common issues for given error messages:
.LP
"username invalid" - The username entered (or a NULL username if none
was entered) is not available on the remote machine. It may also be
possible the remote BMC's username configuration is incorrect.
.LP
"password invalid" - The password entered (or a NULL password if none
was entered) is not correct. It may also be possible the password for
the user is not correctly configured on the remote BMC.
.LP
"password verification timeout" - Password verification has timed out.
A "password invalid" error (described above) or a generic "session
timeout" (described below) occurred.  During this point in the
protocol it cannot be differentiated which occurred.
.LP
"k_g invalid" - The K_g key entered (or a NULL K_g key if none was
entered) is not correct. It may also be possible the K_g key is not
correctly configured on the remote BMC.
.LP
"privilege level insufficient" - An IPMI command requires a higher
user privilege than the one authenticated with. Please try to
authenticate with a higher privilege. This may require authenticating
to a different user which has a higher maximum privilege.
.LP
"privilege level cannot be obtained for this user" - The privilege
level you are attempting to authenticate with is higher than the
maximum allowed for this user. Please try again with a lower
privilege. It may also be possible the maximum privilege level
allowed for a user is not configured properly on the remote BMC.
.LP
"authentication type unavailable for attempted privilege level" - The
authentication type you wish to authenticate with is not available for
this privilege level. Please try again with an alternate
authentication type or alternate privilege level. It may also be
possible the available authentication types you can authenticate with
are not correctly configured on the remote BMC.
.LP
"cipher suite id unavailable" - The cipher suite id you wish to
authenticate with is not available on the remote BMC. Please try
again with an alternate cipher suite id. It may also be possible the
available cipher suite ids are not correctly configured on the remote
BMC.
.LP
"ipmi 2.0 unavailable" - IPMI 2.0 was not discovered on the remote
machine. Please try to use IPMI 1.5 instead.
.LP
"connection timeout" - Initial IPMI communication failed. A number of
potential errors are possible, including an invalid hostname
specified, an IPMI IP address cannot be resolved, IPMI is not enabled
on the remote server, the network connection is bad, etc. Please
verify configuration and connectivity.
.LP
"session timeout" - The IPMI session has timed out. Please reconnect.
If this error occurs often, you may wish to increase the
retransmission timeout. Some remote BMCs are considerably slower than
others.
.LP
"device not found" - The specified device could not be found. Please
check configuration or inputs and try again.
.LP
"driver timeout" - Communication with the driver or device has timed
out. Please try again.
.LP
"message timeout" - Communication with the driver or device has timed
out. Please try again.
.LP
"BMC busy" - The BMC is currently busy. It may be processing
information or have too many simultaneous sessions to manage. Please
wait and try again.
.LP
"could not find inband device" - An inband device could not be found.
Please check configuration or specify specific device or driver on the
command line.
.LP
"driver timeout" - The inband driver has timed out communicating to
the local BMC or service processor. The BMC or service processor may
be busy or (worst case) possibly non-functioning.
.LP
Please see WORKAROUNDS below to also if there are any vendor specific
bugs that have been discovered and worked around.
.SH "WORKAROUNDS"
With so many different vendors implementing their own IPMI solutions,
different vendors may implement their IPMI protocols incorrectly. The
following lists the workarounds currently available to handle
discovered compliance issues.
.LP
When possible, workarounds have been implemented so they will be
transparent to the user. However, some will require the user to
specify a workaround be used via the -W option.
.LP
The hardware listed below may only indicate the hardware that a
problem was discovered on. Newer versions of hardware may fix the
problems indicated below. Similar machines from vendors may or may
not exhibit the same problems. Different vendors may license their
firmware from the same IPMI firmware developer, so it may be
worthwhile to try workarounds listed below even if your motherboard is
not listed.
.LP
"assumeio" - This workaround option will assume inband interfaces
communicate with system I/O rather than being memory-mapped. This
will work around systems that report invalid base addresses. Those
hitting this issue may see "device not supported" or "could not find
inband device" errors.  Issue observed on HP ProLiant DL145 G1.
.LP
"spinpoll" - This workaround option will inform some inband drivers
(most notably the KCS driver) to spin while polling rather than
putting the process to sleep. This may significantly improve the wall
clock running time of tools because an operating system scheduler's
granularity is much larger than the time it takes to perform a single
message transaction. However, by spinning, your system will be
performing less useful work by not contexting out the tool for a more
useful task.
.LP
"authcap" - This workaround option will skip early checks for username
capabilities, authentication capabilities, and K_g support and allow
IPMI authentication to succeed. It works around multiple issues in
which the remote system does not properly report username
capabilities, authentication capabilities, or K_g status. Those
hitting this issue may see "username invalid", "authentication type
unavailable for attempted privilege level", or "k_g invalid" errors.
Issue observed on Asus P5M2/P5MT-R/RS162-E4/RX4, Intel SR1520ML/X38ML,
and Sun Fire 2200/4150/4450 with ELOM.
.LP
"idzero" - This workaround option will allow empty session IDs to be
accepted by the client. It works around IPMI sessions that report
empty session IDs to the client. Those hitting this issue may see
"session timeout" errors. Issue observed on Tyan S2882 with M3289
BMC.
.LP
"unexpectedauth" - This workaround option will allow unexpected
non-null authcodes to be checked as though they were expected. It
works around an issue when packets contain non-null authentication
data when they should be null due to disabled per-message
authentication. Those hitting this issue may see "session timeout"
errors. Issue observed on Dell PowerEdge 2850,SC1425. Confirmed
fixed on newer firmware.
.LP
"forcepermsg" - This workaround option will force per-message
authentication to be used no matter what is advertised by the remote
system. It works around an issue when per-message authentication is
advertised as disabled on the remote system, but it is actually
required for the protocol. Those hitting this issue may see "session
timeout" errors.  Issue observed on IBM eServer 325.
.LP
"endianseq" - This workaround option will flip the endian of the
session sequence numbers to allow the session to continue properly.
It works around IPMI 1.5 session sequence numbers that are the wrong
endian. Those hitting this issue may see "session timeout" errors.
Issue observed on some Sun ILOM 1.0/2.0 (depends on service processor
endian).
.LP
"intel20" - This workaround option will work around several Intel IPMI
2.0 authentication issues. The issues covered include padding of
usernames, and password truncation if the authentication algorithm is
HMAC-MD5-128. Those hitting this issue may see "username invalid",
"password invalid", or "k_g invalid" errors. Issue observed on Intel
SE7520AF2 with Intel Server Management Module (Professional Edition).
.LP
"supermicro20" - This workaround option will work around several
Supermicro IPMI 2.0 authentication issues on motherboards w/ Peppercon
IPMI firmware. The issues covered include handling invalid length
authentication codes. Those hitting this issue may see "password
invalid" errors.  Issue observed on Supermicro H8QME with SIMSO
daughter card. Confirmed fixed on newerver firmware.
.LP
"sun20" - This workaround option will work work around several Sun
IPMI 2.0 authentication issues. The issues covered include invalid
lengthed hash keys, improperly hashed keys, and invalid cipher suite
records. Those hitting this issue may see "password invalid" or "bmc
error" errors.  Issue observed on Sun Fire 4100/4200/4500 with ILOM.
This workaround automatically includes the "opensesspriv" workaround.
.LP
"opensesspriv" - This workaround option will slightly alter FreeIPMI's
IPMI 2.0 connection protocol to workaround an invalid hashing
algorithm used by the remote system. The privilege level sent during
the Open Session stage of an IPMI 2.0 connection is used for hashing
keys instead of the privilege level sent during the RAKP1 connection
stage. Those hitting this issue may see "password invalid", "k_g
invalid", or "bad rmcpplus status code" errors.  Issue observed on Sun
Fire 4100/4200/4500 with ILOM, Inventec 5441/Dell Xanadu II,
Supermicro X8DTH, Supermicro X8DTG, Intel S5500WBV/Penguin Relion 700,
and Intel S2600JF/Appro 512X. This workaround is automatically
triggered with the "sun20" workaround.
.LP
"integritycheckvalue" - This workaround option will work around an
invalid integrity check value during an IPMI 2.0 session establishment
when using Cipher Suite ID 0. The integrity check value should be 0
length, however the remote motherboard responds with a non-empty
field. Those hitting this issue may see "k_g invalid" errors. Issue
observed on Supermicro X8DTG, Supermicro X8DTU, and Intel
S5500WBV/Penguin Relion 700.
.LP
"slowcommit" - This workaround will slow down commits to the BMC by
sleeping one second between the commit of sections. It works around
motherboards that have BMCs that can be overwhelmed by commits. Those
hitting this issue may see commit errors or commits not being written
to the BMC. Issue observed on Supermicro H8QME.
.LP
"veryslowcommit" - This workaround will slow down commits to the BMC
by sleeping one second between the commit of every key. It works
around motherboards that have BMCs that can be overwhelmed by commits.
Those hitting this issue may see commit errors or commits not being
written to the BMC. Issue observed on Quanta S99Q/Dell FS12-TY.
.SH "EXAMPLES"
.B # ipmi-pef-config --checkout
.PP
Output all configuration information to the console.
.PP
.B # ipmi-pef-config --checkout --filename=pef-data1.conf
.PP
Store all configuration information in pef-data1.conf.
.PP
.B # ipmi-pef-config --diff --filename=pef-data2.conf
.PP
Show all difference between the current configuration and the pef-data2.conf file.
.PP
.B # ipmi-pef-config --commit --filename=pef-data1.conf
.PP
Commit all configuration values from the pef-data1.conf file.
.PP
.SH "KNOWN ISSUES"
On older operating systems, if you input your username, password,
and other potentially security relevant information on the command
line, this information may be discovered by other users when using
tools like the
.B ps(1)
command or looking in the /proc file system. It is generally more
secure to input password information with options like the -P or -K
options. Configuring security relevant information in the FreeIPMI
configuration file would also be an appropriate way to hide this information.
.LP
In order to prevent brute force attacks, some BMCs will temporarily
"lock up" after a number of remote authentication errors. You may
need to wait awhile in order to this temporary "lock up" to pass
before you may authenticate again.
.SH "REPORTING BUGS"
Report bugs to <freeipmi\-users@gnu.org> or <freeipmi\-devel@gnu.org>.
.SH "COPYRIGHT"
Copyright \(co 2007-2010 FreeIPMI Core Team.
.PP
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.
.SH "SEE ALSO"
freeipmi(7), bmc-config(8), ipmi-sensors-config(8),
ipmi-chassis-config(8)
.PP
http://www.gnu.org/software/freeipmi/
